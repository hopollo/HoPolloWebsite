{"version":3,"sources":["components/Navbar.js","components/Main.js","components/FeaturedVideos.js","components/TwitterFeed.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","useState","open","setOpen","className","onClick","title","href","target","rel","main","FeaturedVideos","src","frameBorder","allow","allowFullscreen","scrolling","TwitterFeed","sourceType","screenName","noHeader","noFooter","theme","Footer","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAqFeA,MAlFf,WAAmB,IAAD,EACQC,oBAAS,GADjB,mBACTC,EADS,KACHC,EADG,KAGhB,OACE,yBACEC,UAAU,SACVC,QAAS,WACAF,GAAPD,KAGDA,EACC,wBAAIE,UAAU,cACZ,0BAAME,MAAM,uBACV,uBACEF,UAAU,wBACVG,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,aAIJ,0BAAME,MAAM,yBACV,uBACEF,UAAU,uBACVG,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,YAIJ,0BAAME,MAAM,yBACV,uBACEF,UAAU,yBACVG,KAAK,mCACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,cAIJ,0BAAME,MAAM,0BACV,uBACEF,UAAU,wBACVG,KAAK,uCACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,aAIJ,0BAAME,MAAM,4BACV,uBACEF,UAAU,uBACVG,KAAK,6BACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,YAIJ,0BAAME,MAAM,yBACV,uBACEC,KAAK,wCACLC,OAAO,SACPC,IAAI,uBAEJ,wBAAIL,UAAU,QAAd,cAIJ,O,MChEKM,MAbf,WACE,OACE,yBAAKN,UAAU,mBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,SAAb,WACA,uBAAGA,UAAU,YAAb,WACU,8BAAO,MADjB,iBAC2C,8BAAO,MADlD,kB,MC6BOO,MAlCf,WACE,OACE,yBAAKP,UAAU,6BACb,yBAAKA,UAAU,qBACb,4BACEQ,IAAI,4CACJN,MAAM,eACNO,YAAY,IACZC,MAAM,gEACNC,gBAAgB,UAGpB,yBAAKX,UAAU,oBACb,4BACEQ,IAAI,kHACJN,MAAM,cACNO,YAAY,IACZE,gBAAgB,OAChBC,UAAU,QAGd,yBAAKZ,UAAU,mBACb,4BACEQ,IAAI,+HACJN,MAAM,cACNO,YAAY,IACZE,gBAAgB,OAChBC,UAAU,U,aCZLC,MAdf,WACE,OACE,yBAAKb,UAAU,gBACb,kBAAC,IAAD,CACEc,WAAW,UACXC,WAAW,YACXC,UAAQ,EACRC,UAAQ,EACRC,MAAM,W,MCUCC,MAnBf,WACE,OACE,yBAAKnB,UAAU,UACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,WAAb,mBACgB,IACd,uBACEG,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAHN,eCWKe,MAZf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAACqB,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae5428d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/navBar.css\";\n\nfunction Navbar() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div\n      className=\"navbar\"\n      onClick={() => {\n        open ? setOpen(false) : setOpen(true);\n      }}\n    >\n      {open ? (\n        <ul className=\"navbar-nav\">\n          <attr title=\"Visiter mon Twitter\">\n            <a\n              className=\"twitter-follow-button\"\n              href=\"https://twitter.com/HoPolloTV\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Twitter</li>\n            </a>\n          </attr>\n\n          <attr title=\"Voir ma chaine Twitch\">\n            <a\n              className=\"twitch-follow-button\"\n              href=\"https://www.twitch.tv/hopollo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Twitch</li>\n            </a>\n          </attr>\n\n          <attr title=\"Voir ma page Facebook\">\n            <a\n              className=\"facebook-follow-button\"\n              href=\"https://www.facebook.com/hopollo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Facebook</li>\n            </a>\n          </attr>\n\n          <attr title=\"Voir ma chaine Youtube\">\n            <a\n              className=\"youtube-follow-button\"\n              href=\"https://www.youtube.com/user/hopollo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Youtube</li>\n            </a>\n          </attr>\n\n          <attr title=\"Voir mes projets publics\">\n            <a\n              className=\"github-follow-button\"\n              href=\"https://github.com/hopollo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Github</li>\n            </a>\n          </attr>\n\n          <attr title=\"Rejoindre mon Discord\">\n            <a\n              href=\"https://discordapp.com/invite/FpMqtSa\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <li className=\"item\">Discord</li>\n            </a>\n          </attr>\n        </ul>\n      ) : null}\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport '../css/main.css';\n\nfunction main() {\n  return (\n    <div className=\"title-container\">\n      <div className=\"container\">\n        <p className=\"title\">HoPollo</p>\n        <p className=\"subtitle\">\n          Tryhard <span>{'//'}</span> Moments funs <span>{'//'}</span> Salty mode\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default main;\n","import React from \"react\";\nimport \"../css/featuredVideos.css\";\n\nfunction FeaturedVideos() {\n  return (\n    <div className=\"featured-videos-container\">\n      <div className=\"youtube-container\">\n        <iframe\n          src=\"https://www.youtube.com/embed/gw3u9Q1PvA0\"\n          title=\"YoutubeClip1\"\n          frameBorder=\"0\"\n          allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullscreen=\"true\"\n        ></iframe>\n      </div>\n      <div className=\"twitch-container\">\n        <iframe\n          src=\"https://clips.twitch.tv/embed?clip=BreakableColdRaisinDerp&parent=hopollo.netlify.app&autoplay=false&muted=true\"\n          title=\"TwitchClip1\"\n          frameBorder=\"0\"\n          allowFullscreen=\"true\"\n          scrolling=\"no\"\n        ></iframe>\n      </div>\n      <div className=\"mixer-container\">\n        <iframe\n          src=\"https://clips.twitch.tv/embed?clip=AltruisticPlausibleSashimiTwitchRaid&parent=hopollo.netlify.app&autoplay=false&muted=true\"\n          title=\"TwitchClip2\"\n          frameBorder=\"0\"\n          allowFullscreen=\"true\"\n          scrolling=\"no\"\n        ></iframe>\n      </div>\n    </div>\n  );\n}\n\nexport default FeaturedVideos;\n","import React from \"react\";\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\nimport '../css/twitter.css';\n\nfunction TwitterFeed() {\n  return (\n    <div className=\"twitter-feed\">\n      <TwitterTimelineEmbed\n        sourceType=\"profile\"\n        screenName=\"hopollotv\"\n        noHeader\n        noFooter\n        theme=\"dark\"\n      />\n    </div>\n  );\n}\n\nexport default TwitterFeed;\n","import React from \"react\";\nimport '../css/footer.css';\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <div className=\"container\">\n        <p className=\"credits\">\n          Distribu√© par{\" \"}\n          <a\n            href=\"https://twitter.com/hopollotv\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            HoPollo\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './css/app.css';\nimport NavBar from './components/Navbar';\nimport Main from './components/Main';\nimport FeaturedVideos from './components/FeaturedVideos';\nimport TwitterFeed from './components/TwitterFeed';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Main />\n      <FeaturedVideos />\n      <TwitterFeed />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}